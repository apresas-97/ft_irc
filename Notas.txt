Un usuario puede estar en muchos canales a la vez sin embargo la informacion que se muestra por pantalla es 
del canal en el que se encuentra en ese momento. La informacion de otros canales se muestra al cambiar de
canal, por tanto desde el primer momento que entra en un canal se guarda de alguna manera todo el chat
para imprimirlo en cuanto cambia de canal...













Tenemos que ponernos de acuerdo en el syntax que usamos

Mi opinion, seguir esta pauta de ejemplo:

Funciones:
return_type<tab>function_name( type var1, type var2, type var3 )
{

}

Indent con TABS de 4 spaces

Variables:
- Declaracion al principio de la funcion a no ser que sea un poco estupido
- Separar variable_type y variable_name con 1 espacio, no hace falta indentarlas igual, ej:
-- O si no, usar 1 tab de separacion, idk

int num;
long lnum;

En vez de

int		num;
long	lnum;

Lo digo por que me parece que esto es comun en la syntax de c++, por que hay variables con tipus muy largos y queda feo algo asi:

std::list<int>::iterator	it;
int							num;

Mejor simplemente:

std::list<int>::iterator it;
int num;

-- Los <> para templates, abierto a propuestas, podemos hacerlo de estas dos formas, imo:

std::list< int >
o
std::list<int>

Me vale lo que acoremos

-ifs, for, while, etc.

Podemos hacer:
if (<condicion>)
o
if ( <condicion> )

Como querais

Y los {} yo voto hacelos asi

scope
{
	// content
}

Pero si os gusta mas, podemos hacer asi

scope {
	/// content
}

Lo que digais, por que creo que vosotros dos lo haceis de la segunda manera

return statements

Yo los hago asi:

return variable;

Sin parentesi, a no ser que sean necesarios por el motivo que sea

Comentarios:

// commentario

Clases:

class ClassName
{
	public:
		ClassName( void );
		ClassName( const ClassName & src );
		~ClassName( void );
		ClassName & operator=( const ClassName & src );
														<== Linea en blanco para separar "temas"
		std::string	public_var;
														<== Linea en blanco antes de cambiar de privacidad
	private:
		std::string _private_var;
};

-----

Al final de cada archivo, linea en blanco

-----

Sobre los #include

Yo INTENTARIA no poner #include innecesarios y intentar ponerlos de forma precisa
